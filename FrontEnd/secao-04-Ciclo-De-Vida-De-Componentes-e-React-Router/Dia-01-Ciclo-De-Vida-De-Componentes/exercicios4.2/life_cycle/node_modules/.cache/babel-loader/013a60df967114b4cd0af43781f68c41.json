{"ast":null,"code":"var _jsxFileName = \"/Users/danielmorais/Documents/Trybe/Trybe-exercicios/Trybe-Exercicios/FrontEnd/secao-04-Ciclo-De-Vida-De-Componentes-e-React-Router/Dia-01-Ciclo-De-Vida-De-Componentes/exercicios4.2/life_cycle/src/components/Counter.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass DadJoke extends React.Component {\n  constructor() {\n    super();\n    this.saveJoke = this.saveJoke.bind(this);\n    this.state = {\n      jokeObj: undefined,\n      loading: true,\n      storedJokes: []\n    };\n  }\n  async fetchJoke() {\n    this.setState({\n      loading: true\n    });\n    const requestHeaders = {\n      headers: {\n        Accept: 'application/json'\n      }\n    };\n    const requestReturn = await fetch('https://icanhazdadjoke.com/', requestHeaders);\n    const requestObject = await requestReturn.json();\n    this.setState({\n      jokeObj: requestObject\n    });\n    this.setState({\n      loading: false\n    });\n  }\n  componentDidMount() {\n    this.fetchJoke();\n    this.saveJoke();\n  }\n  saveJoke() {\n    const {\n      jokeObj\n    } = this.state;\n    this.setState(previousState => ({\n      storedJokes: [...previousState.storedJokes, jokeObj]\n    }));\n  }\n  render() {\n    const {\n      storedJokes,\n      loading\n    } = this.state;\n    const loadingElement = /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 28\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: storedJokes.map(_ref => {\n          let {\n            id,\n            joke\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            children: joke\n          }, id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 47\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), loading ? loadingElement : ''\n\n      /*\n      Aqui vamos construir nossa lógica com uma renderização condicional\n      do nosso componente Joke, a ideia é renderizar um loading enquanto\n      esperamos a nossa requisição de piadas finalizar.\n       <p>RENDERIZAÇÃO CONDICIONAL</p>\n      */]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default DadJoke;","map":{"version":3,"names":["React","DadJoke","Component","constructor","saveJoke","bind","state","jokeObj","undefined","loading","storedJokes","fetchJoke","setState","requestHeaders","headers","Accept","requestReturn","fetch","requestObject","json","componentDidMount","previousState","render","loadingElement","map","id","joke"],"sources":["/Users/danielmorais/Documents/Trybe/Trybe-exercicios/Trybe-Exercicios/FrontEnd/secao-04-Ciclo-De-Vida-De-Componentes-e-React-Router/Dia-01-Ciclo-De-Vida-De-Componentes/exercicios4.2/life_cycle/src/components/Counter.jsx"],"sourcesContent":["import React from 'react';\n\nclass DadJoke extends React.Component {\n  constructor() {\n    super();\n\n    this.saveJoke = this.saveJoke.bind(this);\n\n    this.state = {\n      jokeObj: undefined,\n      loading: true,\n      storedJokes: [],\n    }\n  }\n\n  async fetchJoke() {\n    this.setState({loading:true})\n    const requestHeaders = { headers: { Accept: 'application/json' } }\n    const requestReturn = await fetch('https://icanhazdadjoke.com/', requestHeaders)\n    const requestObject = await requestReturn.json();\n    this.setState({\n      jokeObj: requestObject,\n\n    })\n    this.setState({loading:false})\n  }\n\n  componentDidMount() {\n    this.fetchJoke();\n    this.saveJoke()\n  }\n\n   saveJoke() {\n    const { jokeObj } = this.state;\n    \n    \n    this.setState(previousState => ({\n      storedJokes: [...previousState.storedJokes, jokeObj]\n  })\n)};\n\n  render() {\n    const { storedJokes,loading } = this.state;\n    const loadingElement = <span>Loading...</span>;\n\n    return (\n      <div>\n        <span>\n          {storedJokes.map(({ id, joke }) => (<p key={id}>{joke}</p>))}\n        </span>\n\n      {\n        loading ? loadingElement:''\n\n\n\n        /*\n        Aqui vamos construir nossa lógica com uma renderização condicional\n        do nosso componente Joke, a ideia é renderizar um loading enquanto\n        esperamos a nossa requisição de piadas finalizar.\n\n        <p>RENDERIZAÇÃO CONDICIONAL</p>\n        */\n      }\n\n      </div>\n    );\n  }\n}\n\nexport default DadJoke;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC;AAE1B,MAAMC,OAAO,SAASD,KAAK,CAACE,SAAS,CAAC;EACpCC,WAAW,GAAG;IACZ,KAAK,EAAE;IAEP,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;IAExC,IAAI,CAACC,KAAK,GAAG;MACXC,OAAO,EAAEC,SAAS;MAClBC,OAAO,EAAE,IAAI;MACbC,WAAW,EAAE;IACf,CAAC;EACH;EAEA,MAAMC,SAAS,GAAG;IAChB,IAAI,CAACC,QAAQ,CAAC;MAACH,OAAO,EAAC;IAAI,CAAC,CAAC;IAC7B,MAAMI,cAAc,GAAG;MAAEC,OAAO,EAAE;QAAEC,MAAM,EAAE;MAAmB;IAAE,CAAC;IAClE,MAAMC,aAAa,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAEJ,cAAc,CAAC;IAChF,MAAMK,aAAa,GAAG,MAAMF,aAAa,CAACG,IAAI,EAAE;IAChD,IAAI,CAACP,QAAQ,CAAC;MACZL,OAAO,EAAEW;IAEX,CAAC,CAAC;IACF,IAAI,CAACN,QAAQ,CAAC;MAACH,OAAO,EAAC;IAAK,CAAC,CAAC;EAChC;EAEAW,iBAAiB,GAAG;IAClB,IAAI,CAACT,SAAS,EAAE;IAChB,IAAI,CAACP,QAAQ,EAAE;EACjB;EAECA,QAAQ,GAAG;IACV,MAAM;MAAEG;IAAQ,CAAC,GAAG,IAAI,CAACD,KAAK;IAG9B,IAAI,CAACM,QAAQ,CAACS,aAAa,KAAK;MAC9BX,WAAW,EAAE,CAAC,GAAGW,aAAa,CAACX,WAAW,EAAEH,OAAO;IACvD,CAAC,CAAC,CACH;EAAA;EAECe,MAAM,GAAG;IACP,MAAM;MAAEZ,WAAW;MAACD;IAAQ,CAAC,GAAG,IAAI,CAACH,KAAK;IAC1C,MAAMiB,cAAc,gBAAG;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAuB;IAE9C,oBACE;MAAA,wBACE;QAAA,UACGb,WAAW,CAACc,GAAG,CAAC;UAAA,IAAC;YAAEC,EAAE;YAAEC;UAAK,CAAC;UAAA,oBAAM;YAAA,UAAaA;UAAI,GAATD,EAAE;YAAA;YAAA;YAAA;UAAA,QAAY;QAAA,CAAC;MAAC;QAAA;QAAA;QAAA;MAAA,QACvD,EAGPhB,OAAO,GAAGc,cAAc,GAAC;;MAIzB;AACR;AACA;AACA;AACA;AACA,QALQ;IAAA;MAAA;MAAA;MAAA;IAAA,QASI;EAEV;AACF;AAEA,eAAetB,OAAO"},"metadata":{},"sourceType":"module"}